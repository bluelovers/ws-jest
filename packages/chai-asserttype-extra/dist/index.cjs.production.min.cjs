"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("type-detect"),t=require("@lazy-assert/check-basic"),n=require("array-hyper-unique");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i,o=r(e);function s(e,n){Object.entries(exports.EnumTypeDetect).forEach((function([t,n]){u(e,t,(function(){this.an(n)}))})),a(e,"integer",t.isInt,n),a(e,"float",t.isFloat,n),a(e,"infinity",t.isInfinity,n),a(e,"nan",t.isNaN,n),a(e,"zero",t.isZero,n),a(e,"positive",t.isPositive,n),a(e,"negative",t.isNegative,n)}function a(e,t,n,r){return u(e,t,(function(){let e=r.flag(this,"object");c(this,t,n(e),e)}))}function u(e,t,n,r,i){return e.Assertion.addChainableMethod(t,i||function(...e){e.length&&this.deep.equal(...e)},n)}function c(e,t,n,r){return e.assert(n,`expected #{this} to be an ${t}`,`expected #{this} to not be an ${t}`,r)}function p(e){return(e||require("chai")).use(s)}exports.EnumTypeDetect=void 0,(i=exports.EnumTypeDetect||(exports.EnumTypeDetect={})).array="Array",i.boolean="boolean",i.date="Date",i.function="function",i.number="number",i.object="Object",i.regexp="RegExp",i.string="string";const f={install:p},l=o.default;exports.ChaiPlugin=f,exports.ChaiPluginAssertType=s,exports._assertType=c,exports.addToAssertion=u,exports.addToAssertionLazy=a,exports.default=f,exports.install=p,exports.list=function(){return n.array_unique_overwrite(Object.keys(exports.EnumTypeDetect).concat(["float","integer","nan","zero","positive","negative"])).sort()},exports.typeOf=l;
//# sourceMappingURL=index.cjs.production.min.cjs.map
